//  pattern set for noun and verb groups

pattern set chunks;

//  patterns for noun groups

ng := 		det-pos? [constit cat=q]* [constit cat=adj]* proper-noun-g* [constit cat=n]* [constit cat=n] |
		det-pos? proper-noun-g |
		[constit cat=pro] ;


det-pos	:= [constit cat=det] |
		[constit cat=det]? [constit cat=n number=singular] "'s";

proper-noun-g := proper-noun-sg+ ([constit cat=p] proper-noun-sg+)*; 

proper-noun-sg := proper-noun+ (conj proper-noun+)*;

conj := [constit cat=cconj] | [constit cat=sconj] ;

proper-noun :=	([token case=cap] | [undefinedCap])+ ;

proper-noun := [ENAMEX];

when ng		add [ngroup];

//  patterns for active verb groups

vg :=		[constit cat=tv] |
		[constit cat=w] vg-inf |
		tv-vbe vg-ving | 
        vg-pt ;

vg-inf :=	[constit cat=v] |
		"be" vg-ving;

vg-ven :=	[constit cat=ven] |
		"been" vg-ving;

vg-ving :=	[constit cat=ving];

vg-pt := "have" vg-ven | "has" vg-ven | "had" vg-ven |
         "have" "been" [constit cat=ven] | "has" "been" [constit cat=ven] | "had" "been" [constit cat=ven] ;

tv-vbe :=	"is" | "are" | "was" | "were";

when vg		add [constit cat=vgroup];

//  patterns for passive verb groups

vg-pass :=	tv-vbe [constit cat=ven] |
		[constit cat=w] "be" [constit cat=ven];

when vg-pass	add [constit cat=vgroup-pass];

//  pattern for infinitival verb groups

to-vg :=	vg-inf;

when to-vg	add [constit cat=vgroup-inf];
